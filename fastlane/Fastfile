default_platform(:ios)

platform :ios do
  desc 'Export ipa'
  lane :export_ipa do
    decode_file
    keychain_password = SecureRandom.uuid
    create_keychain(
      name: 'ios-build.keychain',
      password: keychain_password,
      default_keychain: true,
      unlock: true,
      timeout: 3600
    )
    if @is_split_cer
      import_certificate(
        certificate_path: 'ios-build-key.p12',
        certificate_password: ENV['CERTIFICATE_PASSWORD'],
        keychain_name: 'ios-build.keychain',
        keychain_password: keychain_password,
        log_output: true
      )
      import_certificate(
        certificate_path: 'ios-build-key.cer',
        certificate_password: ENV['CERTIFICATE_PASSWORD'],
        keychain_name: 'ios-build.keychain',
        keychain_password: keychain_password,
        log_output: true
      )
    else
      import_certificate(
        certificate_path: 'ios-build.p12',
        certificate_password: ENV['CERTIFICATE_PASSWORD'],
        keychain_name: 'ios-build.keychain',
        keychain_password: keychain_password,
        log_output: true
      )
    end
    @profiles.each_key { |key| install_provisioning_profile(path: key) }
    disable_targets = ENV['DISABLE_TARGETS']&.split(/,/)
    update_code_signing_settings(
      use_automatic_signing: false,
      path: ENV['PROJECT_PATH'],
      targets: disable_targets
    )
    @profiles.each do |key, value|
      if !value.nil?
        targets = !disable_targets.nil? ? value & disable_targets : value
      else
        targets = disable_targets
      end
      update_project_provisioning(
        xcodeproj: ENV['PROJECT_PATH'],
        profile: key,
        code_signing_identity: ENV['CODE_SIGNING_IDENTITY'],
        target_filter:
          targets&.map { |target| "^#{Regexp.escape(target)}$" }.join('|')
      )
    end
    update_project_team(
      path: ENV['PROJECT_PATH'],
      teamid: ENV['TEAM_ID'],
      targets: disable_targets
    )
    if !ENV['WORKSPACE_PATH'].empty?
      build_app(
        workspace: ENV['WORKSPACE_PATH'],
        configuration: ENV['CONFIGURATION'],
        scheme: ENV['SCHEME'],
        output_directory: File.dirname(ENV['OUTPUT_PATH']),
        output_name: File.basename(ENV['OUTPUT_PATH']),
        clean: true,
        export_method: ENV['EXPORT_METHOD']
      )
    else
      build_app(
        project: ENV['PROJECT_PATH'],
        configuration: ENV['CONFIGURATION'],
        scheme: ENV['SCHEME'],
        output_directory: File.dirname(ENV['OUTPUT_PATH']),
        output_name: File.basename(ENV['OUTPUT_PATH']),
        clean: true,
        export_method: ENV['EXPORT_METHOD']
      )
    end
    delete_keychain(name: 'ios-build.keychain')
  end

  def decode_file
    @is_split_cer =
      !ENV['P12_KEY_BASE64'].empty? && !ENV['P12_CER_BASE64'].empty?
    if @is_split_cer
      File.write('../ios-build-key.p12', Base64.decode64(ENV['P12_KEY_BASE64']))
      File.write('../ios-build-key.cer', Base64.decode64(ENV['P12_CER_BASE64']))
    else
      File.write('../ios-build.p12', Base64.decode64(ENV['P12_BASE64']))
    end
    @profiles = {}
    if !ENV['MULTI_MOBILEPROVISION_BASE64'].empty?
      JSON.parse(ENV['MULTI_MOBILEPROVISION_BASE64']).each.with_index(
        1
      ) do |(key, value), index|
        filename = "ios-build-#{index}.mobileprovision"
        File.write("../#{filename}", Base64.decode64(key))
        @profiles[filename] = value
      end
    else
      filename = 'ios-build.mobileprovision'
      File.write(
        "../#{filename}",
        Base64.decode64(ENV['MOBILEPROVISION_BASE64'])
      )
      @profiles[filename] = nil
    end
  end
end
